<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE displayreplay SYSTEM "../../../dtd/displayreplay.dtd">

<displayreplay x="0" y="0" width="100%" height="100%" fadetime="{fadetime}">
    <background>
        <!-- background infobar -->
        <area x="0" y="80%" width="100%" height="20%" layer="1">
            <fill color="{clrTransBlack}" />
        </area>
        <!-- background datetime -->
        <area x="70%" y="0" width="30%" height="13%" layer="1">
            <fill color="{clrTransBlack}" />
            <drawrectangle x="0" y="0" width="45%" height="100%" color="{clrTransBlueLight}" />
        </area>
    </background>

    <backgroundmodeonly>
        <!-- background small infobar -->
        <area x="25%" y="85%" width="50%" height="10%" layer="1">
            <fill color="{clrTransBlack}" />
        </area>
    </backgroundmodeonly>

    <!-- Available Variables datetime:
    {time}                              time in hh:mm
    {day}                               day in digits
    {dayleadingzero}                    day in digits with leading 0
    {dayname}                           Full name of the day
    {daynameshort}                      Short 3 char name of the day
    {month}                             month in digits with leading 0
    {monthname}                         Full name of the month
    {monthnameshort}                    3 letter abbrivation of month name
    {year}                              year in yyyy
    -->
    <datetime>
        <area x="70%" y="0" width="13%" height="13%" layer="2">
            <drawtext align="right" y="0" font="{light}" fontsize="50%" color="{clrWhite}" text="{dayname}" />
            <drawtext align="right" y="48%" font="{light}" fontsize="50%" color="{clrWhite}" text="{day}. {monthnameshort}" />
        </area>
        <area x="85%" y="0" width="13%" height="13%" layer="2">
            <drawtext align="center" valign="center" font="{light}" fontsize="100%" color="{clrWhite}" text="{time}" />
        </area>
    </datetime>

    <!-- Available Variables scrapercontent:
    {posterpath}                        Full Path of Poster to use in image path attribute
    {posterwidth}                       width of poster in pixel
    {posterheight}                      height of poster in pixel
    {hasPoster}                         true if poster is available
    {bannerpath}                        Full Path of banner to use in image path attribute
    {bannerwidth}                       width of banner in pixel
    {bannerheight}                      height of banner in pixel
    {hasBanner}                         true if banner is available

    Use this tokens if you want to display a banner for series and a poster for movies:
    {mediapath}                         Full Path of Poster or Banner to use in image path attribute
    {mediawidth}                        width of image in pixel
    {mediaheight}                       height of image in pixel
    {isbanner}                          true if image is a banner, false if it is a poster
    -->
    <scrapercontent>
        <area condition="{isbanner}" x="0" y="0" width="{areaheight}*0.13*{mediawidth}/{mediaheight}" height="13%" layer="2">
            <drawimage imagetype="image" path="{mediapath}" align="center" valign="center"  width="{areawidth}" height="{areaheight}"/>
        </area>
        <area condition="not{isbanner}" x="0" y="0" width="{areaheight}*0.5*{mediawidth}/{mediaheight}" height="50%" layer="2">
            <drawimage imagetype="image" path="{mediapath}" x="5" y="5" width="{areawidth}-10" height="{areaheight}-10"/>
        </area>
    </scrapercontent>

    <!-- Available Variables rectitle:
    {rectitle}                     Title of Recording
    {recsubtitle}                  Subtitle of the Recording
    {recdate}                      Date Recording in dd.mm.yy
    {rectime}                      Time of Recording in hh:mm
    -->
    <rectitle>
        <area x="1%" y="80%" width="69%" height="8%" layer="2">
            <drawtext x="0" name="title" valign="center" width="{areawidth}" font="{semibold}" fontsize="85%" color="{clrBlueLight}" text="{rectitle}" />
            <drawtext x="{width(title)}+10" valign="center" width="{areawidth}-{width(title)}-10" font="{light}" fontsize="85%" color="{clrWhite}" text="{recsubtitle}" />
        </area>
    </rectitle>

    <!-- Available Variables recinfo:
    {screenwidth}                      width of currently displayed recording in px
    {screenheight}                     height of currently displayed recording in px
    {resolution}                       resolution: hd1080i, hd720p, sd576i
    {aspect}                           screen aspect, each 4:3, 16:9 or 21:9
    {isHD}                             true for hd1080i and hd720p
    {isWideScreen}                     true if aspect is 16:9 or 21:9
    -->
    <recinfo>
        <area x="70%" y="80%" width="29%" height="8%" layer="2">
           <!-- widescreen icon -->
            <drawimage name="widescreen" condition="{isWideScreen}" imagetype="icon" path="ico_widescreen_on" x="{areawidth} - {width(widescreen)}" valign="center" width="{areaheight}*0.8*1.87" height="{areaheight}*0.8"/>
            <drawimage condition="not{isWideScreen}" imagetype="icon" path="ico_widescreen_off" x="{areawidth} - {width(widescreen)}" valign="center" width="{areaheight}*0.8*1.87" height="{areaheight}*0.8"/>
            <!-- hd/sd icon -->
            <drawimage name="hd" condition="{isHD}" imagetype="icon" path="ico_hd_on" x="{posx(widescreen)} - 15 - {width(hd)}" valign="center" width="{areaheight}*0.8*2.04" height="{areaheight}*0.8"/>
            <drawimage condition="not{isHD}" imagetype="icon" path="ico_hd_off" x="{posx(widescreen)} - 15 - {width(hd)}" valign="center" width="{areaheight}*0.8*2.04" height="{areaheight}*0.8"/>
            <!-- screenresolution text -->
            <drawtext name="reslabel" x="{posx(hd)} - 30 - {width(reslabel)}" valign="center" font="{light}" fontsize="60%" color="{clrWhite}" text="{screenwidth}x{screenheight}" />
        </area>
    </recinfo>

    <!-- Available Variables currenttime:
    {reccurrent}                   Current Time in hh:mm:ss
    -->
    <currenttime>
        <area x="1%" y="92%" width="30%" height="7%" layer="2">
            <drawtext x="0" valign="center" font="{light}" fontsize="100%" color="{clrTransBlueLight}" text="{reccurrent}" />
        </area>
    </currenttime>

    <!-- Available Variables totaltime:
    {rectotal}                   Total Time in hh:mm:ss
    {timeshift}                  true if a timeshifted recording is displayed
    {timeshifttotal}             Total Time of timeshift event in hh:mm
    -->
    <totaltime>
        <area x="69%" y="92%" width="30%" height="7%" layer="2">
            <drawtext condition="not{timeshift}" align="right" valign="center" font="{light}" fontsize="100%" color="{clrWhite}" text="{rectotal}" />
            <drawtext condition="{timeshift}" align="right" valign="center" font="{light}" fontsize="100%" color="{clrWhite}" text="{timeshifttotal} ({rectotal})" />
        </area>
    </totaltime>

    <!-- Available Variables endtime:
    {recend}                     End Time in hh:mm
    -->
    <endtime>
        <area x="63%" y="92%" width="20%" height="7%" layer="2">
            <drawtext align="center" valign="bottom" font="{light}" fontsize="60%" color="{clrWhite}" text="{tr(endsat)}: {recend}" />
        </area>
    </endtime>
    <!-- Available Variables progressbar:
    {current}                   current frame of recording
    {total}                     total frames of recording
    {timeshift}                 true if a timeshifted recording is displayed
    {timeshifttotal}            total number of frames of timeshift event
    -->
    <progressbar>
        <area condition="not{timeshift}" x="5%" y="89%" width="90%" height="3%" layer="2">
            <fill color="{clrDarkGray}" />
            <drawrectangle x="0" y="0" width="{current}/{total}*{areawidth}" height="100%" color="{clrTransBlueLight}" />
        </area>
        <area condition="{timeshift}" x="5%" y="89%" width="90%" height="3%" layer="2">
            <fill color="{clrDarkGray}" />
            <drawrectangle x="0" y="0" width="{total}/{timeshifttotal}*{areawidth}" height="100%" color="{clrTransWhite}" />
            <drawrectangle x="0" y="0" width="{current}/{timeshifttotal}*{areawidth}" height="100%" color="{clrTransBlueLight}" />
        </area>
    </progressbar>

    <!-- Available Variables cutmarks:
    {timeshift}                 true if a timeshifted recording is displayed
    {marks[]}                   array of available marks
    {marks[position]}           frame of current mark
    {marks[endposition]}        frame where startmark ends
    {marks[total]}              total number of frames
    {marks[timeshifttotal]}     total number of frames of timeshift event
    {marks[active]}             true if current replay position hits exactly the mark
    {marks[startmark]}          true if mark is start mark
    -->
    <cutmarks>
        <area condition="not{timeshift}" x="5%" y="89%" width="90%" height="3%" layer="3">
            <loop name="marks" x="0" y="0" orientation="absolute">
                <!-- draw mark -->
                <drawrectangle condition="not{marks[active]}" x="{marks[position]}/{marks[total]}*{areawidth}" y="0" width="1" height="100%" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth}" y="0" width="5" height="1" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth}" y="{areaheight}-1" width="5" height="1" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth} - 5" y="0" width="5" height="1" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth} - 5" y="{areaheight}-1" width="5" height="1" color="{clrWhite}" />
                <!-- draw active mark -->
                <drawrectangle condition="{marks[active]}" x="{marks[position]}/{marks[total]}*{areawidth}" y="0" width="1" height="100%" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth}" y="0" width="5" height="1" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth}" y="{areaheight}-1" width="5" height="1" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth} - 5" y="0" width="5" height="1" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth} - 5" y="{areaheight}-1" width="5" height="1" color="{clrRed}" />
                <!-- draw bar to next mark if mark is startmark-->                
                <drawrectangle condition="{marks[startmark]}" x="{marks[position]}/{marks[total]}*{areawidth}" y="30%" width="{marks[endposition]}/{marks[total]}*{areawidth} - {marks[position]}/{marks[total]}*{areawidth}" height="40%" color="{clrWhite}" />
            </loop>
        </area>
        <area condition="{timeshift}" x="5%" y="89%" width="90%" height="3%" layer="3">
            <loop name="marks" x="0" y="0" orientation="absolute">
                <!-- draw mark -->
                <drawrectangle condition="not{marks[active]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth}" y="0" width="1" height="100%" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth}" y="0" width="5" height="1" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth}" y="{areaheight}-1" width="5" height="1" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth} - 5" y="0" width="5" height="1" color="{clrWhite}" />
                <drawrectangle condition="not{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth} - 5" y="{areaheight}-1" width="5" height="1" color="{clrWhite}" />
                <!-- draw active mark -->
                <drawrectangle condition="{marks[active]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth}" y="0" width="1" height="100%" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth}" y="0" width="5" height="1" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ {marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth}" y="{areaheight}-1" width="5" height="1" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth} - 5" y="0" width="5" height="1" color="{clrRed}" />
                <drawrectangle condition="{marks[active]} ++ not{marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth} - 5" y="{areaheight}-1" width="5" height="1" color="{clrRed}" />
                <!-- draw bar to next mark if mark is startmark-->                
                <drawrectangle condition="{marks[startmark]}" x="{marks[position]}/{marks[timeshifttotal]}*{areawidth}" y="30%" width="{marks[endposition]}/{marks[timeshifttotal]}*{areawidth} - {marks[position]}/{marks[timeshifttotal]}*{areawidth}" height="40%" color="{clrWhite}" />
            </loop>
        </area>
    </cutmarks>

    <!-- Available Variables controlicons and controliconsmodeonly:
    {play}              true if recording is played currently
    {pause}             true if recording is paused
    {forward}           true if fast forwarding 
    {forward1x}         true if fast forwarding 1x (with 3 trickspeeds)
    {forward2x}         true if fast forwarding 2x (with 3 trickspeeds)
    {forward3x}         true if fast forwarding 3x (with 3 trickspeeds)
    {rewind}            true if rewinding 
    {rewind1x}          true if rewinding 1x (with 3 trickspeeds)
    {rewind2x}          true if rewinding 2x (with 3 trickspeeds)
    {rewind3x}          true if rewinding 3x (with 3 trickspeeds)
    -->
    <controlicons>
        <area x="30%" y="93%" width="40%" height="7%" layer="3">
            <drawimage condition="not{rewind} ++ not{rewind1x} ++ not{rewind2x} ++ not{rewind3x}" imagetype="icon" path="ico_rew_off" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind}" imagetype="icon" path="ico_rew" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind1x}" imagetype="icon" path="ico_rew_1x" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind2x}" imagetype="icon" path="ico_rew_2x" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind3x}" imagetype="icon" path="ico_rew_3x" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            
            <drawimage condition="not{pause}" imagetype="icon" path="ico_pause_off" x="{areawidth}/2 - {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{pause}" imagetype="icon" path="ico_pause" x="{areawidth}/2 - {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>

            <drawimage condition="not{play}" imagetype="icon" path="ico_play_off" x="{areawidth}/2" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{play}" imagetype="icon" path="ico_play" x="{areawidth}/2" y="0" width="{areaheight}" height="{areaheight}"/>

            <drawimage condition="not{forward} ++ not{forward1x} ++ not{forward2x} ++ not{forward3x}" imagetype="icon" path="ico_ff_off" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward}" imagetype="icon" path="ico_ff" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward1x}" imagetype="icon" path="ico_ff_1x" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward2x}" imagetype="icon" path="ico_ff_2x" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward3x}" imagetype="icon" path="ico_ff_3x" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
        </area>
    </controlicons>

    <controliconsmodeonly>
        <area x="25%" y="85%" width="50%" height="10%" layer="3">
            <drawimage condition="not{rewind} ++ not{rewind1x} ++ not{rewind2x} ++ not{rewind3x}" imagetype="icon" path="ico_rew_off" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind}" imagetype="icon" path="ico_rew" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind1x}" imagetype="icon" path="ico_rew_1x" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind2x}" imagetype="icon" path="ico_rew_2x" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{rewind3x}" imagetype="icon" path="ico_rew_3x" x="{areawidth}/2 - 2*{areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            
            <drawimage condition="not{pause}" imagetype="icon" path="ico_pause_off" x="{areawidth}/2 - {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{pause}" imagetype="icon" path="ico_pause" x="{areawidth}/2 - {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>

            <drawimage condition="not{play}" imagetype="icon" path="ico_play_off" x="{areawidth}/2" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{play}" imagetype="icon" path="ico_play" x="{areawidth}/2" y="0" width="{areaheight}" height="{areaheight}"/>

            <drawimage condition="not{forward} ++ not{forward1x} ++ not{forward2x} ++ not{forward3x}" imagetype="icon" path="ico_ff_off" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward}" imagetype="icon" path="ico_ff" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward1x}" imagetype="icon" path="ico_ff_1x" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward2x}" imagetype="icon" path="ico_ff_2x" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
            <drawimage condition="{forward3x}" imagetype="icon" path="ico_ff_3x" x="{areawidth}/2 + {areaheight}" y="0" width="{areaheight}" height="{areaheight}"/>
        </area>
    </controliconsmodeonly>

    <!-- Available Variables jump:
    {jump}                      time to jump to in hh:mm
    -->
    <jump>
        <area x="35%" y="45%" width="30%" height="10%" layer="1">
            <fill color="{clrTransBlack}" />
        </area>
        <area x="35%" y="45%" width="30%" height="10%" layer="2">
            <drawtext align="center" valign="center" font="{light}" fontsize="80%" color="{clrWhite}" text="{jump}" />
        </area>
    </jump>

    <!-- Available Variables onpause and onpausemodeonly:
    {name}                    title of recording
    {shorttext}               shorttext of recording
    {description}             description of recording
    {date}                    date of recording in dd.mm.yy
    {time}                    time of recording in hh:mm
    {daynumeric}              day as number
    {month}                   month as number
    {year}                    year as number
    {duration}                real duration of recording in minutes
    {durationhours}           real duration, full hours
    {durationminutes}         real duration, rest of minutes
    {durationevent}           duration of corresponding event in minutes
    {durationeventhours}      event duration, full hours
    {durationeventminutes}    event duration, rest of minutes

    {ismovie}                 true if event is scraped as a movie
    Available variables for movies:
    {movietitle}              movie title from themoviedb
    {movieoriginalTitle}      movie original title from themoviedb
    {movietagline}            movie tagline from themoviedb
    {movieoverview}           movie overview from themoviedb
    {movieadult}              true if movie is rated as adult
    {moviebudget}             movie budget from themoviedb in $
    {movierevenue}            movie revenue from themoviedb in $
    {moviegenres}             movie genres from themoviedb
    {moviehomepage}           movie homepage from themoviedb
    {moviereleasedate}        movie release date from themoviedb
    {movieruntime}            movie runtime from themoviedb
    {moviepopularity}         movie popularity from themoviedb
    {movievoteaverage}        movie vote average from themoviedb
    {posterwidth}             width of scraped poster
    {posterheight}            height of scraped poster
    {posterpath}              absolute path of scraped poster
    {fanartwidth}             width of scraped fanart
    {fanartheight}            height of scraped fanart
    {fanartpath}              absolute path of scraped fanart
    {movieiscollection}       true if movie is part of a collection
    {moviecollectionName}     name of movie collection
    {collectionposterwidth}   width of scraped collection poster
    {collectionposterheight}  height of scraped collection poster
    {collectionposterpath}    absolute path of scraped collection poster
    {collectionfanartwidth}   width of scraped collection fanart
    {collectionfanartheight}  height of scraped collection fanart
    {collectionfanartpath}    absolute path of scraped collection fanart
    {actors[]}                array with movie actors
    {actors[name]}            real name of actor
    {actors[role]}            actor role
    {actors[thumb]}           absolute path of scraped actor thumb
    {actors[thumbwidth]}      width of scraped actor thumb
    {actors[thumbheight]}     height of scraped actor thumb

    {isseries}                true if event is scraped as a series
    Available variables for series:
    {seriesname}              name of series
    {seriesoverview}          series overview
    {seriesfirstaired}        first aired date 
    {seriesnetwork}           network which produces series
    {seriesgenre}             series genre
    {seriesrating}            series thetvdb rating
    {seriesstatus}            status of series (running / finished)
    {episodetitle}            title of episode
    {episodenumber}           number of episode
    {episodeseason}           season of episode
    {episodefirstaired}       first aired date of episode
    {episodegueststars}       guest stars of episode
    {episodeoverview}         episode overview
    {episoderating}           user rating for episode
    {episodeimagewidth}       episode image width
    {episodeimageheight}      episode image height
    {episodeimagepath}        episode image path
    {seasonposterwidth}       episode season poster width
    {seasonposterheight}      episode season poster height
    {seasonposterpath}        episode season poster path
    {seriesposter1width}      width of 1st poster
    {seriesposter1height}     height of 1st poster
    {seriesposter1path}       path of 1st poster
    {seriesposter2width}      width of 2nd poster
    {seriesposter2height}     height of 2nd poster
    {seriesposter2path}       path of 2nd poster
    {seriesposter3width}      width of 3rd poster
    {seriesposter3height}     height of 3rd poster
    {seriesposter3path}       path of 3rd poster
    {seriesfanart1width}      width of 1st fanart
    {seriesfanart1height}     height of 1st fanart
    {seriesfanart1path}       path of 1st fanart
    {seriesfanart2width}      width of 2nd fanart
    {seriesfanart2height}     height of 2nd fanart
    {seriesfanart2path}       path of 2nd fanart
    {seriesfanart3width}      width of 3rd fanart
    {seriesfanart3height}     height of 3rd fanart
    {seriesfanart3path}       path of 3rd fanart
    {seriesbanner1width}      width of 1st banner
    {seriesbanner1height}     height of 1st banner
    {seriesbanner1path}       path of 1st banner
    {seriesbanner2width}      width of 2nd banner
    {seriesbanner2height}     height of 2nd banner
    {seriesbanner2path}       path of 2nd banner
    {seriesbanner3width}      width of 3rd banner
    {seriesbanner3height}     height of 3rd banner
    {seriesbanner3path}       path of 3rd fanart
    {actors[]}                array with movie actors
    {actors[name]}            real name of actor
    {actors[role]}            actor role
    {actors[thumb]}           absolute path of scraped actor thumb
    {actors[thumbwidth]}      width of scraped actor thumb
    {actors[thumbheight]}     height of scraped actor thumb    
    -->
    <onpause delay="60" fadetime="{fadeTime}">
        <area x="0" y="0" width="100%" height="100%" layer="7">
            <fill color="{clrSemiTransBlack}" />
        </area>
    </onpause>

    <onpausemodeonly delay="20" fadetime="{fadeTime}">
        <area x="0" y="0" width="100%" height="100%" layer="7">
            <fill color="{clrSemiTransBlack}" />
        </area>
        <area x="0" y="0" width="100%" height="100%" layer="6">
            <drawtext align="center" valign="center" font="{semibold}" fontsize="25%" color="{clrWhite}" text="{tr(pause)}" />
            <drawimage condition="{isseries}" imagetype="image" path="{seriesbanner1path}" align="center" y="10" width="{areawidth}*0.5" height="{areawidth} * 0.5 * {seriesbanner1height} / {seriesbanner1width}"/>
            <drawimage condition="{ismovie}" imagetype="image" path="{posterpath}" x="10" y="10" width="{areaheight} * 0.4  * {posterwidth} / {posterheight}" height="{areaheight} * 0.4"/>
        </area>
    </onpausemodeonly>

    <!-- Available Variables message:
    {text}                     message text
    {status}                   true if message is a status message
    {info}                     true if message is a info message
    {warning}                  true if message is a warn message
    {error}                    true if message is a error message
    -->
    <message>
        <area x="10%" y="45%" width="80%" height="10%" layer="1">
            <fill color="{clrTransBlack}" />
            <drawrectangle condition="{status}" x="20" y="0" width="20" height="100%" color="{clrGreen}" />
            <drawrectangle condition="{info}" x="20" y="0" width="20" height="100%" color="{clrBlue}" />
            <drawrectangle condition="{warning}" x="20" y="0" width="20" height="100%" color="{clrYellow}" />
            <drawrectangle condition="{error}" x="20" y="0" width="20" height="100%" color="{clrRed}" />
            <drawtext align="center" valign="center" width="{areawidth} - 80" font="{light}" fontsize="40%" color="{clrWhite}" text="{text}" />
        </area>
    </message>
</displayreplay>
